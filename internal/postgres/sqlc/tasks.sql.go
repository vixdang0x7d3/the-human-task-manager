// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks("id", "user_id", "project_id", "description", "priority", "status", "deadline", "schedule", "wait", "create", "end")
VALUES ($1, $2, $3,  $4, $10::task_priority, $11::task_status, $5, $6, $7, $8, $9)
RETURNING id, user_id, project_id, completed_by, description, priority, status, deadline, schedule, wait, "create", "end"
`

type CreateTaskParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	ProjectID   uuid.NullUUID
	Description string
	Deadline    time.Time
	Schedule    time.Time
	Wait        time.Time
	Create      time.Time
	End         time.Time
	Priority    TaskPriority
	Status      TaskStatus
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ID,
		arg.UserID,
		arg.ProjectID,
		arg.Description,
		arg.Deadline,
		arg.Schedule,
		arg.Wait,
		arg.Create,
		arg.End,
		arg.Priority,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.CompletedBy,
		&i.Description,
		&i.Priority,
		&i.Status,
		&i.Deadline,
		&i.Schedule,
		&i.Wait,
		&i.Create,
		&i.End,
	)
	return i, err
}
