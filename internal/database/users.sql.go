// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const byEmail = `-- name: ByEmail :one
SELECT id, username, first_name, last_name, email, password, signup_at, last_login FROM users
WHERE email=$1
`

func (q *Queries) ByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, byEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.SignupAt,
		&i.LastLogin,
	)
	return i, err
}

const byID = `-- name: ByID :one
SELECT id, username, first_name, last_name, email, password, signup_at, last_login FROM users
WHERE id=$1
`

func (q *Queries) ByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, byID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.SignupAt,
		&i.LastLogin,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users("id", "username", "first_name", "last_name", "email", "password", "signup_at", "last_login")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, username, first_name, last_name, email, password, signup_at, last_login
`

type CreateUserParams struct {
	ID        uuid.UUID
	Username  string
	FirstName string
	LastName  string
	Email     string
	Password  string
	SignupAt  time.Time
	LastLogin time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.SignupAt,
		arg.LastLogin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.SignupAt,
		&i.LastLogin,
	)
	return i, err
}
